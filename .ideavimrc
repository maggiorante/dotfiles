set scrolloff=10
set linenumber
set showmode
set showcmd
set visualbell
set ignorecase
set smartcase
set hlsearch
set incsearch
set number
set autoindent
set tabstop=4
set shiftwidth=4
set expandtab
set clipboard+=unnamed
set ttimeout
set ttimeoutlen=50

" Set the leader key
let mapleader = " "

" Remap jk to `Esc`
inoremap jk <Esc>

" Unbinds the Space key as it's used as the leader key
nnoremap <Space> <NOP>

" `Esc` removes search highlights
nmap <Esc> :nohl<CR>

" `=` - Reformat code in the selected scope
nmap = <Action>(ReformatCode)

" `<leader> + w(indow) + p(in)` - Toggle the pin status of the document
" `<leader> + w(indows) + c(lose) + a(ll)` - Close all unpinned documents
nmap <leader>wp <Action>(PinActiveTabToggle)
nmap <leader>wca <Action>(CloseAllUnpinnedEditors)

" `<Alt> + j` - Navigate to the next tab
" `<Alt> + k` - Navigate to the previous tab
nmap <A-k> <Action>(NextTab)
nmap <A-j> <Action>(PreviousTab)

" `<Alt> + <Enter>` - Show action indicators and action list
" `<Ctrl> + <Space>` - Provide a completion list for partially typed words
nmap <A-CR> <Action>(QuickActions)
nmap <C-Space> <Action>(EditorCompleteStatement)

" `<leader> + r(emove) + s(ort)` - Remove and sort 'usings'
nmap <leader>rs <Action>(ReformatCode)

" `]` - Navigate to the next member / type / tag
" `[` - Navigate to the previous member / type / tag
nmap [ <Action>(MethodUp)
nmap ] <Action>(MethodDown)

" `<Ctrl> + h` - Move backward through navigation history
" `<Ctrl> + l` - Move forward through navigation history
nmap <C-h> <Action>(Back)
nmap <C-l> <Action>(Forward)

" Improves navigation when wrapping
" by swapping `j` with `gj` and `k` with `gk`
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk k

" A declaration introduces an identifier and describes its type, be it a type, object, or function. A declaration is what the compiler needs to accept references to that identifier.
" A definition actually instantiates/implements this identifier. It's what the linker needs in order to link references to those entities.
" A definition can be used in the place of a declaration.
" Not really a difference in Visual Studio.


" `g + D(eclaration)` - Navigate to a declaration of a symbol
" `g + d(efinition)` - Navigate to a definition of a symbol
" `g + i(mplementation)` - Navigate to implementation of a type or a type member
" `g + A(all references)` - Find usages of any symbol from the solution and referenced assemblies
" `c + d(definition)` - Rename (change definition)
" `r + c(ollapse)` - Collapse current region
" `r + e(xpand)` - Expand current region
nmap gD <Action>(GotoTypeDeclaration)
nmap gd <Action>(GotoDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gA <Action>(ShowUsages)
nmap cd <Action>(RenameElement)
nmap <leader>rc <Action>(CollapseRegion)
nmap <leader>re <Action>(ExpandRegion)

" `g + e(rror)` - Navigate forwards through all issues detected in the current file
" `g + E(rror)` - Navigate backwards through all issues detected in the current file
nmap ge <Action>(GotoNextError)
nmap gE <Action>(GotoPreviousError)


" <g + //> - Find in all files
" <g + /> - Find in current file
nmap g// <Action>(SearchEverywhere)
nmap g/ <Action>(Find)

" `<leader> + b + b(reakpoint)` - Toggle a breakpoint at the current line
" `<leader> + b(reakpoints) + d(isable)` - Disable all breakpoins
" `<leader> + b(reakpoints) + e(nable)` - Enable all breakpoints
" `<leader> + b(reakpoints) + r(emove)` - Remove all breakpoints
" `<leader> + b(reakpoints) + a(ll)` - Show the breakpoints list
nmap <leader>bb <Action>(ToggleLineBreakpoint)
nmap <leader>br <Action>(Debugger.RemoveAllBreakpoints)
nmap <leader>ba <Action>(ViewBreakpoints)

" `<leader> + s(tart) + d(ebug)` - Start with debugging
nmap <leader>sd <Action>(Debug)

" `<leader> + /` - Comment/uncomment the current line
nmap <leader>/ <Action>(CommentByLineComment)
